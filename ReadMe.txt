“The project is called 'CubeMesher' and is attached as the single CubeMesher.zip file. The project is written in C++, using Microsoft Visual Studio 2015 . When you open the project using Microsoft Visual Studio C++, you should be able to compile and link it and run it. After you've done, you can be certain that your environment is ok. It should also be possible to open the project in a newer version of Visual Studio.

Once you succeeded in running this program, the goal is to extend the program with an algorithm to mesh a cube (only nodes and elements, no properties, axis systems or materials). The basic idea is that there is a design that represents a Cube with a certain dimension in x, y and z direction. You have to create a mesh that consists of Shell elements  (only QUADs) on the outer side of the cube. The inside of the cube has to be empty. The number of nodes needed for the mesh is variable in the x, y and z direction. As a tip, please note that the number of nodes to create is equal to (X*Y*Z)-((X-2)*(Y-2)*(Z-2)), where X, Y and Z denote the number of nodes in respect to x, y and z direction. To not have to deal with annoying problems, you can assume that at least three points are created in each direction.

 You only have to fill in the algorithm in the CreateMethod function in CubeMesher.cpp file and you can create additional files as needed. You will find instructions also in the source code files.”

Rezultatul ar trebui sa arate astfel (pentru un cub cu 11 noduri in fiecare directie): see unnamed.png

My approach of the algorithm is straightforward: when a node is created, it is added to the mesh, using the interface provided, and then the node index is added to the corresponding quads.
I splits the nodes in 3 types: corner nodes (only 8 of them) that can be found in 3 quads from 3 different cube faces, edge nodes that are found in 4 quads in 2 different cube faces and the inner face nodes that can be found in 4 quads in one face. 
A node is identify by a (x, y, z) tuple with x = [0, xNumNodes - 1], y = [0, yNumNodes - 1], z = [0, zNumNodes - 1]. Because the cube have to be empty inside, a property of this tuple is that at least one component have to be 0 or max limit of its corresponding interval, otherwise means that the tuple describes a point inside the cube and not on a face. Also, this so called node id can be used to get a list of the faces that intersect in that point(only for corner and edge points, for inner face points this method does not make sense). Ex: if x component is 0 that means that point can be found on the left face of the cube or if x component is xNumNodes - 1 is on the right side, y = 0 means that the point is on the bottom face, etc. For the layout of the cube and the order of the nodes see comments in the code.
A cube face contains a list of quad/shell and a shell is a list of 4 indexes, indexes used to access nodes in the big array of created nodes. A shell is found inside a face using a vector of 2 components, which represent the position of the bottom left node (the third component is ignored because it is constant across the face. Ex: left face has component x = 0 so we use y and z to identify shells, back face has z = zNumNodes - 1 and use x and y as coordinates, etc).

Using x, y, z = 1000 as input data and on an i7, 3.6Ghz processor the program average time is 3s 450ms. On a 2GHz processor and using interpolation, "should" run in a 6s 300ms average time. Hopefully.
